package com.tae.letscook.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.tae.letscook.model.edaman.EdamanApiModel;
import com.tae.letscook.model.edaman.Hit;
import com.tae.letscook.model.edaman.Recipe;
import com.tae.letscook.utils.RecipesGenerator;
import com.tae.letscook.utils.UrlParamsUtils;

@Service("RecipesService")
public class RecipesService {
	
	private final static String EDAMAN_API_ENDPOINT ="https://api.edamam.com/search?q={query}&to=2&app_id=c13f76f4&app_key=e1ab0d3d48e13585699e64fa2d864baa";
	private final static String QUERY = "query";
	
	
	@Autowired
	RestTemplate restTemplate;
	
	/**
	 * getUrlParams creates a map with the user query and the tipe of recipe that is looking for.
	 * E.g: query = rice, omelet, etc.
	 * @param query
	 * @return Map<String, String>
	 */
//	private Map<String, String> getUrlParams(String query) {
//		Map<String, String> paramMap = new HashMap<>();
//		paramMap.put(QUERY, query);
//		return paramMap;
//	}
	
	/**
	 * getRecipeFromAPI hit the endpoint in the API to get one recipe by search.
	 * Use a ResTemplate object for that.
	 * Pass as parameter getUrlParams to add the user query in the url
	 * @param query
	 * @return EdamanApiModel
	 */
	private List<Hit> getRecipeFromAPI(String query) {	
//		restTemplate.getForEntity("https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=AIzaSyBwHufGl6yoKw4YKfpRlWALW2-vSPgnCNk", Recipe.class);
		return extractRecipeFromModelApi(restTemplate.getForObject(EDAMAN_API_ENDPOINT, EdamanApiModel.class, UrlParamsUtils.getUrlParams(query)));
	}
	
	/**
	 * Extract the list of recipes from the Api Model
	 * @param apiModel
	 * @return
	 */
	private List<Hit> extractRecipeFromModelApi (EdamanApiModel apiModel){
		return apiModel.getHits();
	}
	
	/**
	 * Method to get a recipe by users search.
	 * Called in RecipeCOntroller
	 * @param query
	 * @return List<Hit> contains a list of Recipe
	 */
	
	public  List<Hit> getRecipe(String query){
		return getRecipeFromAPI(query);
	}
	
	/**
	 * Method to get a list of recipes. 
	 * The API doesn't provide a list of recipe so we will autogenerated. 
	 * @return
	 */
	public List<Recipe> getRecipes (){
		return randomRecipesGenerator();
	}
	
	/**
	 * Generate a random list of recipes 
	 * @return List<Recipe>
	 */
	private List<Recipe> randomRecipesGenerator (){
		List<Recipe> recipesToReturn = new ArrayList<>(2); // TODO change this to 10
		Random random = new Random();
		for(String foodType : RecipesGenerator.fakeFoodTypeGenerator()){
			List<Hit> recipes = getRecipe(foodType);
			Recipe recipe = recipes.get( random.nextInt(recipes.size())).getRecipe();
			recipesToReturn.add(recipe);
		}
//		List<Hit> recipes = getRecipe("chicken"); // Delete this, only for test purpose
//		Recipe recipe = recipes.get(0).getRecipe();
//		recipesToReturn.add(recipe);
		return recipesToReturn;
	}

	
}
